package kred_calc;

import java.io.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.time.format.DateTimeFormatter;
import java.time.*;
import java.util.*;
import java.net.URL;
import javax.swing.JFormattedTextField;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import javax.swing.JOptionPane;
import java.text.DecimalFormat;
import java.math.RoundingMode;
import javax.swing.*;
import javax.swing.table.*;
import java.time.temporal.*;
import java.awt.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.nio.charset.Charset;

// @author lad 
public class Kred_calculator extends javax.swing.JFrame {

    public Kred_calculator() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        date_cred = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        curr_code = new javax.swing.JComboBox<>();
        summa = new javax.swing.JFormattedTextField();
        kurs = new javax.swing.JFormattedTextField();
        summa_ekv = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        proc_perv_vznos = new javax.swing.JFormattedTextField();
        perv_vznos = new javax.swing.JFormattedTextField();
        button_recalc = new javax.swing.JButton();
        check_recalc = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        sum_kred = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        priv_proc_stavka = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        priv_srok_kred = new javax.swing.JFormattedTextField();
        priv_srok_kred_year = new javax.swing.JFormattedTextField();
        jLabel8 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        proc_stavka = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        srok_kred = new javax.swing.JFormattedTextField();
        srok_kred_year = new javax.swing.JFormattedTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        type_proc = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        type_annuitet = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        sum_plat = new javax.swing.JFormattedTextField();
        srok_kred_year_new = new javax.swing.JFormattedTextField();
        jLabel15 = new javax.swing.JLabel();
        srok_kred_new = new javax.swing.JFormattedTextField();
        jLabel16 = new javax.swing.JLabel();
        jPanel_rasrochka = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        kurs_start = new javax.swing.JFormattedTextField();
        year_0 = new javax.swing.JLabel();
        kurs_year_0 = new javax.swing.JFormattedTextField();
        year_1 = new javax.swing.JLabel();
        kurs_year_1 = new javax.swing.JFormattedTextField();
        year_2 = new javax.swing.JLabel();
        kurs_year_2 = new javax.swing.JFormattedTextField();
        year_3 = new javax.swing.JLabel();
        kurs_year_3 = new javax.swing.JFormattedTextField();
        kurs_year_4 = new javax.swing.JFormattedTextField();
        year_4 = new javax.swing.JLabel();
        koef_otsech = new javax.swing.JFormattedTextField();
        year_5 = new javax.swing.JLabel();
        jPanel_rasrochka1 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        bank_itog = new javax.swing.JFormattedTextField();
        strax_itog = new javax.swing.JFormattedTextField();
        notar_itog = new javax.swing.JFormattedTextField();
        rieltor_itog = new javax.swing.JFormattedTextField();
        sum_dop_plat = new javax.swing.JFormattedTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        bank_komiss_1_text = new javax.swing.JLabel();
        bank_komiss_2_text = new javax.swing.JLabel();
        bank_komiss_1 = new javax.swing.JTextField();
        bank_komiss_2 = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        stra_komiss_1_text = new javax.swing.JLabel();
        stra_komiss_2_text = new javax.swing.JLabel();
        stra_komiss_3_text = new javax.swing.JLabel();
        stra_komiss_1 = new javax.swing.JTextField();
        stra_komiss_3 = new javax.swing.JTextField();
        stra_komiss_2 = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        nota_komiss_1_text = new javax.swing.JLabel();
        nota_komiss_2_text = new javax.swing.JLabel();
        nota_komiss_3_text = new javax.swing.JLabel();
        nota_komiss_4_text = new javax.swing.JLabel();
        nota_komiss_5_text = new javax.swing.JLabel();
        nota_komiss_2 = new javax.swing.JTextField();
        nota_komiss_1 = new javax.swing.JTextField();
        nota_komiss_3 = new javax.swing.JTextField();
        nota_komiss_4 = new javax.swing.JTextField();
        nota_komiss_5 = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        riel_komiss_1_text = new javax.swing.JLabel();
        riel_komiss_2_text = new javax.swing.JLabel();
        riel_komiss_3_text = new javax.swing.JLabel();
        riel_komiss_2 = new javax.swing.JTextField();
        riel_komiss_1 = new javax.swing.JTextField();
        riel_komiss_3 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        pereplata = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        type_rasch = new javax.swing.JComboBox<>();
        jPanel10 = new javax.swing.JPanel();
        jButton_calc = new javax.swing.JButton();
        jButton_ini_file = new javax.swing.JButton();
        jButton_update = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jButton_ExportCSV = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Кредитный калькулятор");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Условия кредитования", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jLabel1.setText("Дата оформления кредита");

        date_cred.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        date_cred.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel2.setText("Стоимость");

        curr_code.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "UAH", "USD", "EUR", "GBP" }));
        curr_code.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                curr_codeActionPerformed(evt);
            }
        });

        summa.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        summa.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        kurs.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.0000"))));
        kurs.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        summa_ekv.setEditable(false);
        summa_ekv.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        summa_ekv.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel3.setText("Первоначальный взнос,  в %");

        proc_perv_vznos.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        proc_perv_vznos.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        perv_vznos.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        perv_vznos.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        button_recalc.setText("Пересчитать");
        button_recalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_recalcActionPerformed(evt);
            }
        });

        check_recalc.setText("Расчет по сумме/% (Да/Нет)");
        check_recalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_recalcActionPerformed(evt);
            }
        });

        jLabel4.setText("Сумма кредита");

        sum_kred.setEditable(false);
        sum_kred.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        sum_kred.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Льготные условия", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jLabel6.setText("% ставка");

        priv_proc_stavka.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        priv_proc_stavka.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel7.setText("Период (мес.)");

        priv_srok_kred.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        priv_srok_kred.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        priv_srok_kred.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                priv_srok_kredKeyReleased(evt);
            }
        });

        priv_srok_kred_year.setEditable(false);
        priv_srok_kred_year.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.0"))));
        priv_srok_kred_year.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel8.setText("(лет)");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(priv_proc_stavka, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(priv_srok_kred, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(priv_srok_kred_year, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel6)
                .addComponent(priv_proc_stavka, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel7)
                .addComponent(priv_srok_kred, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(priv_srok_kred_year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel8))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Обычные условия", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jLabel9.setText("% ставка");

        proc_stavka.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        proc_stavka.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel10.setText("Период (мес.)");

        srok_kred.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        srok_kred.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        srok_kred.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                srok_kredKeyReleased(evt);
            }
        });

        srok_kred_year.setEditable(false);
        srok_kred_year.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.0"))));
        srok_kred_year.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel11.setText("(лет)");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(proc_stavka, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(srok_kred, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(srok_kred_year, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel9)
                .addComponent(proc_stavka, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel10)
                .addComponent(srok_kred, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(srok_kred_year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel11))
        );

        jLabel12.setText("Форма погашения");

        type_proc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "классика", "аннуитетная", "рассрочка" }));
        type_proc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                type_procActionPerformed(evt);
            }
        });

        jLabel13.setText("Тип");

        type_annuitet.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "30/360", "факт/360", "факт/факт" }));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Досрочное погашение", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jLabel14.setText("Сумма платежей ручная");

        sum_plat.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        sum_plat.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        srok_kred_year_new.setEditable(false);
        srok_kred_year_new.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.0"))));
        srok_kred_year_new.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel15.setText("Новый срок кредита (мес.)");

        srok_kred_new.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        srok_kred_new.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        srok_kred_new.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                srok_kred_newKeyReleased(evt);
            }
        });

        jLabel16.setText("(лет)");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sum_plat)
                .addGap(16, 16, 16))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(srok_kred_new, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(srok_kred_year_new, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16)
                .addGap(47, 47, 47))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(sum_plat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(srok_kred_new, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(srok_kred_year_new, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)))
        );

        jPanel_rasrochka.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Раcсрочка изменение курса USD", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jLabel17.setText("Нач. курс");

        kurs_start.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        kurs_start.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        year_0.setText("2018");

        kurs_year_0.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        kurs_year_0.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        year_1.setText("2019");

        kurs_year_1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        kurs_year_1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        year_2.setText("2020");

        kurs_year_2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        kurs_year_2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        year_3.setText("2021");

        kurs_year_3.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        kurs_year_3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        kurs_year_4.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        kurs_year_4.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        year_4.setText("2022");

        koef_otsech.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        koef_otsech.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        koef_otsech.setText("1");

        year_5.setText("Коеф.от");

        javax.swing.GroupLayout jPanel_rasrochkaLayout = new javax.swing.GroupLayout(jPanel_rasrochka);
        jPanel_rasrochka.setLayout(jPanel_rasrochkaLayout);
        jPanel_rasrochkaLayout.setHorizontalGroup(
            jPanel_rasrochkaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_rasrochkaLayout.createSequentialGroup()
                .addGroup(jPanel_rasrochkaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addComponent(kurs_start, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel_rasrochkaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(kurs_year_0, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(year_0))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_rasrochkaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(kurs_year_1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(year_1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_rasrochkaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(kurs_year_2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(year_2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_rasrochkaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(kurs_year_3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(year_3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_rasrochkaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(kurs_year_4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(year_4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_rasrochkaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(koef_otsech, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(year_5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_rasrochkaLayout.setVerticalGroup(
            jPanel_rasrochkaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_rasrochkaLayout.createSequentialGroup()
                .addGroup(jPanel_rasrochkaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(year_0)
                    .addComponent(year_1)
                    .addComponent(year_2)
                    .addComponent(year_3)
                    .addComponent(year_4)
                    .addComponent(year_5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_rasrochkaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kurs_year_4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kurs_year_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kurs_year_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kurs_start, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kurs_year_0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kurs_year_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(koef_otsech, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel_rasrochka1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Дополнительные расходы", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jTabbedPane2.setToolTipText("");

        jLabel18.setText("Банк");

        bank_itog.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        bank_itog.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        bank_itog.setText("0,00");

        strax_itog.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        strax_itog.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        strax_itog.setText("0,00");

        notar_itog.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        notar_itog.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        notar_itog.setText("0,00");

        rieltor_itog.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        rieltor_itog.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        rieltor_itog.setText("0,00");

        sum_dop_plat.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        sum_dop_plat.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        sum_dop_plat.setText("0,00");
        sum_dop_plat.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jLabel23.setText("Страхование");

        jLabel24.setText("Оформление");

        jLabel25.setText("Прочие");

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel26.setText("Всего");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bank_itog, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sum_dop_plat, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(strax_itog, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(notar_itog, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rieltor_itog, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(bank_itog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(strax_itog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(notar_itog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rieltor_itog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sum_dop_plat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Итоги", jPanel5);

        bank_komiss_1_text.setText("Комиссия банка за обслуж.");

        bank_komiss_2_text.setText("Ежемесячная комиссия банка");

        bank_komiss_1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        bank_komiss_2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(bank_komiss_1_text)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bank_komiss_1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(bank_komiss_2_text)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                        .addComponent(bank_komiss_2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bank_komiss_1_text)
                    .addComponent(bank_komiss_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bank_komiss_2_text)
                    .addComponent(bank_komiss_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(82, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Банк", jPanel6);

        stra_komiss_1_text.setText("Страх. предмета ипотеки");

        stra_komiss_2_text.setText("Договор страхования жизни");

        stra_komiss_3_text.setText("Страх от нещасного случая");

        stra_komiss_1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        stra_komiss_3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        stra_komiss_2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(stra_komiss_1_text)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(stra_komiss_1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(stra_komiss_2_text)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addComponent(stra_komiss_2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(stra_komiss_3_text)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(stra_komiss_3, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stra_komiss_1_text)
                    .addComponent(stra_komiss_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stra_komiss_2_text)
                    .addComponent(stra_komiss_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stra_komiss_3_text)
                    .addComponent(stra_komiss_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Страхование", jPanel7);

        nota_komiss_1_text.setText("Внес.реестр залог. имущества");

        nota_komiss_2_text.setText("Оформление договора залога");

        nota_komiss_3_text.setText("Госпошлина");

        nota_komiss_4_text.setText("Пенсионный фонд");

        nota_komiss_5_text.setText("Оформ догов. покупки-продаж");

        nota_komiss_2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        nota_komiss_1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        nota_komiss_3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        nota_komiss_4.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        nota_komiss_5.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(nota_komiss_1_text)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nota_komiss_1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addComponent(nota_komiss_2_text)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nota_komiss_2, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addComponent(nota_komiss_5_text)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nota_komiss_5, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addComponent(nota_komiss_3_text)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nota_komiss_3, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addComponent(nota_komiss_4_text)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nota_komiss_4, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nota_komiss_1_text)
                    .addComponent(nota_komiss_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nota_komiss_2_text)
                    .addComponent(nota_komiss_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nota_komiss_3_text)
                    .addComponent(nota_komiss_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nota_komiss_4_text)
                    .addComponent(nota_komiss_4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nota_komiss_5_text)
                    .addComponent(nota_komiss_5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Оформление", jPanel8);

        riel_komiss_1_text.setText("Экспертная оценка недвижим");

        riel_komiss_2_text.setText("Консульт. и оформл. документ");

        riel_komiss_3_text.setText("Регистрация договора в БТИ");

        riel_komiss_2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        riel_komiss_1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        riel_komiss_3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addComponent(riel_komiss_3_text)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(riel_komiss_3, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(riel_komiss_1_text, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(riel_komiss_2_text, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(riel_komiss_2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(riel_komiss_1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(riel_komiss_1_text)
                    .addComponent(riel_komiss_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(riel_komiss_2_text)
                    .addComponent(riel_komiss_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(riel_komiss_3_text)
                    .addComponent(riel_komiss_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Прочие", jPanel9);

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel19.setText("Переплата");

        pereplata.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        pereplata.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pereplata.setText("0,00");
        pereplata.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        javax.swing.GroupLayout jPanel_rasrochka1Layout = new javax.swing.GroupLayout(jPanel_rasrochka1);
        jPanel_rasrochka1.setLayout(jPanel_rasrochka1Layout);
        jPanel_rasrochka1Layout.setHorizontalGroup(
            jPanel_rasrochka1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_rasrochka1Layout.createSequentialGroup()
                .addComponent(jTabbedPane2)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_rasrochka1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pereplata, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
        jPanel_rasrochka1Layout.setVerticalGroup(
            jPanel_rasrochka1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_rasrochka1Layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_rasrochka1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(pereplata, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(type_proc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(type_annuitet, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel_rasrochka, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel_rasrochka1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(check_recalc)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(button_recalc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(proc_perv_vznos, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(curr_code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(summa, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(kurs)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(date_cred, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(summa_ekv, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(perv_vznos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sum_kred, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(date_cred, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(curr_code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(summa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kurs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(summa_ekv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(proc_perv_vznos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(perv_vznos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_recalc)
                    .addComponent(jLabel4)
                    .addComponent(sum_kred, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(check_recalc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(type_proc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(type_annuitet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_rasrochka, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_rasrochka1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Дата", "Долг", "Плат.%", "Плат.тело", "Переплата", "Плат.доп.", "Итого"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jLabel5.setText("Тип расчета:");

        type_rasch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                type_raschActionPerformed(evt);
            }
        });

        jButton_calc.setText("Расчитать");
        jButton_calc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_calcActionPerformed(evt);
            }
        });

        jButton_ini_file.setLabel("XML файл");
        jButton_ini_file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ini_fileActionPerformed(evt);
            }
        });

        jButton_update.setText("Обновить");
        jButton_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_updateActionPerformed(evt);
            }
        });

        jLabel20.setText("%S - % с суммы кредита, %F - % от стоимости квартиры"); // NOI18N

        jLabel32.setText("%YEAR - ежегодно, %MONTH - ежемесячно");

        jButton_ExportCSV.setText("Экспорт в CSV");
        jButton_ExportCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ExportCSVActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_update)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_ini_file))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addComponent(jButton_ExportCSV)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_calc, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton_ini_file)
                            .addComponent(jButton_update))
                        .addGap(18, 18, 18))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel32)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_calc)
                    .addComponent(jButton_ExportCSV))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(type_rasch, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(5, 5, 5))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(type_rasch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(2, 2, 2))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // открытие окна
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        is_program_loading = true;
                
        Poisk_xml_files();
        Read_xml_file_kred_calc();
        
        is_program_loading = false;
        
        Dop_plat();
        //Date dd = new Date();
        //LocalDateTime.from(dd.toInstant().atZone(ZoneId.systemDefault())).minusDays(1);                
        // минус 1 день
        //LocalDateTime localDateTime = dd.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
        //localDateTime = localDateTime.minusDays(1);
        //dd = Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());                
    }//GEN-LAST:event_formWindowOpened

    // изменение выбора кода валюты
    private void curr_codeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_curr_codeActionPerformed
        
        if (is_program_loading == true) { return; }
        
        // curr_code
        String text = this.curr_code.getSelectedItem().toString();            
        if ("UAH".equals(text)) {
            this.kurs.setValue(Float.parseFloat("1"));
            this.kurs.setEditable(false);                
            } else {
                this.kurs.setEditable(true);
                // из сайта 
                Date mDate = (Date) this.date_cred.getValue();        
                this.kurs.setValue(getKursNbu(text, mDate));                   
            } 
        // Расчет суммы эквивалента
        this.summa_ekv.setValue(getObjectFloatNaN(this.summa.getValue()) * getObjectFloatNaN(this.kurs.getValue()));                
    }//GEN-LAST:event_curr_codeActionPerformed

    // Нажимаем переключатель расчет по сумме/%
    private void check_recalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_recalcActionPerformed
        
        if (is_program_loading == true) { return; }
        
        // Сумма кредита
        if (this.check_recalc.isSelected() == false) {
            
            this.perv_vznos.setEditable(false);        
            this.perv_vznos.setValue(null);            
            this.proc_perv_vznos.setEditable(true);                                
            this.proc_perv_vznos.setValue(q_proc_perv_vznos);
            
            this.sum_kred.setValue(getObjectFloatNaN(this.summa.getValue()) * getObjectFloatNaN(this.proc_perv_vznos.getValue()) / 100);        
        } else {
                        
            this.perv_vznos.setEditable(true);        
            this.perv_vznos.setValue(q_perv_vznos);
            this.proc_perv_vznos.setEditable(false);
            this.proc_perv_vznos.setValue(null);            
                        
            this.sum_kred.setValue(getObjectFloatNaN(this.perv_vznos.getValue()));        
        }        
    }//GEN-LAST:event_check_recalcActionPerformed

    // Наживаем кнопку - Пересчитать
    private void button_recalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_recalcActionPerformed
        
        if (is_program_loading == true) { return; }
        
        // пересчитываем сумму кредита
        curr_codeActionPerformed(evt);
        
        // Сумма кредита
        double m_sum_cred;
        if (this.check_recalc.isSelected() == false) {
            
            m_sum_cred = getObjectFloatNaN(this.summa_ekv.getValue()) - getObjectFloatNaN(this.summa_ekv.getValue()) * getObjectFloatNaN(this.proc_perv_vznos.getValue()) / 100;        
            q_proc_perv_vznos = getObjectFloatNaN(this.proc_perv_vznos.getValue());
        } else {
                        
            m_sum_cred = getObjectFloatNaN(this.summa_ekv.getValue()) - getObjectFloatNaN(this.perv_vznos.getValue());        
            q_perv_vznos = getObjectFloatNaN(this.perv_vznos.getValue());
        }
        if (m_sum_cred < 0) {m_sum_cred = 0;}
        this.sum_kred.setValue(m_sum_cred);                        
                
        Dop_plat();
    }//GEN-LAST:event_button_recalcActionPerformed

    // вводим данные в поле Период - Обычные условия
    private void srok_kredKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_srok_kredKeyReleased
        if (is_program_loading == true) { return; }
        
        JFormattedTextField textField = (JFormattedTextField) evt.getSource();
        String text = textField.getText();
        this.srok_kred_year.setValue(getObjectFloatNaN(text) / 12);                
    }//GEN-LAST:event_srok_kredKeyReleased

    // вводим данные в поле Период - Льготные условия
    private void priv_srok_kredKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priv_srok_kredKeyReleased
        if (is_program_loading == true) { return; }
        
        JFormattedTextField textField = (JFormattedTextField) evt.getSource();
        String text = textField.getText();
        this.priv_srok_kred_year.setValue(getObjectFloatNaN(text) / 12);                
    }//GEN-LAST:event_priv_srok_kredKeyReleased

    // вводим данные в поле Новый срок кредита
    private void srok_kred_newKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_srok_kred_newKeyReleased
        if (is_program_loading == true) { return; }
        
        JFormattedTextField textField = (JFormattedTextField) evt.getSource();
        String text = textField.getText();
        this.srok_kred_year_new.setValue(getObjectFloatNaN(text) / 12);                
    }//GEN-LAST:event_srok_kred_newKeyReleased

    // Изменяем  - Тип расчета
    private void type_raschActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_type_raschActionPerformed
        if (is_program_loading == true) { return; }
        Read_xml_file_kred_calc();
        Dop_plat();
    }//GEN-LAST:event_type_raschActionPerformed

    // Жмем клавишу - Расчитать
    private void jButton_calcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_calcActionPerformed
        // пересчитываем перед расчетов таблицы
        button_recalcActionPerformed(evt);
        Paint_table();
    }//GEN-LAST:event_jButton_calcActionPerformed

    // Жмем клавишу - Обновить
    private void jButton_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_updateActionPerformed
        if (is_program_loading == true) { return; }
        Read_xml_file_kred_calc();
        Dop_plat();
        
        // чистка таблицы
        DefaultTableModel tableModel = (DefaultTableModel) this.jTable1.getModel();
        while (tableModel.getRowCount()>0) {
           tableModel.removeRow(0);
        }        
    }//GEN-LAST:event_jButton_updateActionPerformed

    // XML файл
    private void jButton_ini_fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ini_fileActionPerformed
        //
        File file = new File(file_path_ini_mas[this.type_rasch.getSelectedIndex()]);
        if (System.getProperty("os.name").toLowerCase().contains("windows")) 
        {
            try {
                String cmd = "rundll32 url.dll,FileProtocolHandler " + file.getCanonicalPath();
                Runtime.getRuntime().exec(cmd);
            } catch (IOException ex) {
                Logger.getLogger(Kred_calculator.class.getName()).log(Level.SEVERE, null, ex);
            }
        } 
        else {
            try {
                Desktop.getDesktop().edit(file);
            } catch (IOException ex) {
                Logger.getLogger(Kred_calculator.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton_ini_fileActionPerformed

    // при выборе - Формы погашения
    private void type_procActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_type_procActionPerformed
        
        //if (is_program_loading == true) { return; }
        
        String m_type_proc = this.type_proc.getSelectedItem().toString();        
        // Аннуитет
        if ("рассрочка".equals(m_type_proc))
        {        
            this.jPanel_rasrochka.setEnabled(true);
            this.kurs_start.setEnabled(true);
            this.kurs_year_0.setEnabled(true);
            this.kurs_year_1.setEnabled(true);
            this.kurs_year_2.setEnabled(true);            
            this.kurs_year_3.setEnabled(true);         
            this.kurs_year_4.setEnabled(true);            
            this.koef_otsech.setEnabled(true);            
        } else {
            this.jPanel_rasrochka.setEnabled(false);
            this.kurs_start.setEnabled(false);
            this.kurs_year_0.setEnabled(false);
            this.kurs_year_1.setEnabled(false);
            this.kurs_year_2.setEnabled(false);            
            this.kurs_year_3.setEnabled(false);         
            this.kurs_year_4.setEnabled(false);            
            this.koef_otsech.setEnabled(false);            
        }                
    }//GEN-LAST:event_type_procActionPerformed

    private void jButton_ExportCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ExportCSVActionPerformed
        
        String mPath = tec_kat_temp;
        // действия, если папка не существует, создаем                        
        if (new File(mPath).exists() == false) {      
          new File(mPath).mkdirs();
        }
        exportToCSV(this.jTable1, mPath + File.separator + "export.csv");
        MessageBox("Экспорт завершен - " + mPath + File.separator + "export.csv", "");
    }//GEN-LAST:event_jButton_ExportCSVActionPerformed

    // Поиск шаблонов
    public final void Poisk_xml_files()
    {        
     File folder = new File(tec_kat_ini);
     File[] listOfFiles = folder.listFiles(new MyFileNameFilter(".xml"));
     type_ini_mas = new String[listOfFiles.length];
     file_path_ini_mas = new String[listOfFiles.length];
     int ii = 0;
     for (File file : listOfFiles) {
     if (file.isFile()) {
        //System.out.println(file.getName());
      try {
        // чтение XML файла
        //File file = new File("c:\\MyXMLFile.xml");
        file_path_ini_mas[ii] = file.getPath();
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();
        Document doc = db.parse(file);
        doc.getDocumentElement().normalize();
        //System.out.println("Root element " + doc.getDocumentElement().getNodeName());
        NodeList nodeLst = doc.getElementsByTagName("global");        

        for (int s = 0; s < nodeLst.getLength(); s++) {
          Node fstNode = nodeLst.item(s); 
          if (fstNode.getNodeType() == Node.ELEMENT_NODE) { 
            Element fstElmnt = (Element) fstNode;
            Element message = (Element) fstElmnt.getElementsByTagName("type").item(0);
            type_ini_mas[s] = message.getTextContent();
            //
            message = (Element) fstElmnt.getElementsByTagName("name").item(0);
            this.type_rasch.addItem(message.getTextContent());            
          }
        }
        } catch (Exception e) {
             e.printStackTrace();
             MessageBoxError(e.toString(), "");
          }
      }
      ii = ii + 1;
     }        
    }
    
    // Чтение XML файла
    public void Read_xml_file_kred_calc()
    {
     try {
        File file = new File(file_path_ini_mas[this.type_rasch.getSelectedIndex()]);
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();
        Document doc = db.parse(file);
        doc.getDocumentElement().normalize();        
        // 
        NodeList nodeLst = doc.getElementsByTagName("main");        
        for (int s = 0; s < nodeLst.getLength(); s++) {
          Node fstNode = nodeLst.item(s); 
          if (fstNode.getNodeType() == Node.ELEMENT_NODE) {                         
            Element fstElmnt = (Element) fstNode;            
            // priv_proc_stavka
            Element message = (Element) fstElmnt.getElementsByTagName("priv_proc_stavka").item(0);
            String text = (message.getTextContent().replace(",", "."));
            if (checkString_Float(text) == true) {
                this.priv_proc_stavka.setValue(Float.parseFloat(text));
            } else {
                this.priv_proc_stavka.setValue(null);
            }            
            // priv_srok
            message = (Element) fstElmnt.getElementsByTagName("priv_srok").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (checkString_Float(text) == true) {
                this.priv_srok_kred.setValue(Float.parseFloat(text));
            } else {
                this.priv_srok_kred.setValue(null);
            }                                    
            // proc_stavka
            message = (Element) fstElmnt.getElementsByTagName("proc_stavka").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (checkString_Float(text) == true) {
                this.proc_stavka.setValue(Float.parseFloat(text));
            } else {
                this.proc_stavka.setValue(null);
            }                                    
            // summa
            message = (Element) fstElmnt.getElementsByTagName("summa").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (checkString_Float(text) == true) {
                this.summa.setValue(Float.parseFloat(text));
            } else {
                this.summa.setValue(null);
            }                                    
            // kurs
            message = (Element) fstElmnt.getElementsByTagName("kurs").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (checkString_Float(text) == true) {
                this.kurs.setValue(Float.parseFloat(text));
            } else {
                this.kurs.setValue(null);
            }                                                
            // perv_vznos
            message = (Element) fstElmnt.getElementsByTagName("perv_vznos").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (checkString_Float(text) == true) {
                this.perv_vznos.setValue(Float.parseFloat(text));
            } else {
                this.perv_vznos.setValue(null);
            }                                                
            // perv_vznos_proc
            message = (Element) fstElmnt.getElementsByTagName("perv_vznos_proc").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (checkString_Float(text) == true) {
                this.proc_perv_vznos.setValue(Float.parseFloat(text));
            } else {
                this.proc_perv_vznos.setValue(null);
            }                                                
            // srok
            message = (Element) fstElmnt.getElementsByTagName("srok").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (checkString_Float(text) == true) {
                this.srok_kred.setValue(Float.parseFloat(text));
            } else {
                this.srok_kred.setValue(null);
            }                                                
            // date_cred
            message = (Element) fstElmnt.getElementsByTagName("date_cred").item(0);
            text = (message.getTextContent().replace(",", "."));                                    
            if (isDateValid(text) == true) {
                this.date_cred.setValue(getDateString(text));
            } else {
                Date date = new Date();
                this.date_cred.setValue(date);
            }                                                
            // type_proc
            message = (Element) fstElmnt.getElementsByTagName("type_proc").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (null == text) {
                this.type_proc.setSelectedIndex(0);
            } else switch (text) {                                                
                  case "A":
                      this.type_proc.setSelectedIndex(1);
                      break;
                  case "R":
                      this.type_proc.setSelectedIndex(2);
                      break;
                  default:
                      this.type_proc.setSelectedIndex(0);
                      break;
              }

            // curr_code
            message = (Element) fstElmnt.getElementsByTagName("curr_code").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == true || (!"USD".equals(text) && !"EUR".equals(text) && !"GBP".equals(text)) ) { text = "UAH"; }
            this.curr_code.setSelectedItem(text);
            if ("UAH".equals(text)) {
                this.kurs.setValue(Float.parseFloat("1"));
                this.kurs.setEditable(false);                
            } else {
                this.kurs.setEditable(true);
                if (this.kurs.getValue() == null) {
                    // из сайта 
                    Date mDate = (Date) this.date_cred.getValue();        
                    this.kurs.setValue(getKursNbu(this.curr_code.getSelectedItem().toString(), mDate));                   
                }                
            }             
          }
        }
        
        nodeLst = doc.getElementsByTagName("rasrochka");        
        for (int s = 0; s < nodeLst.getLength(); s++) {
          Node fstNode = nodeLst.item(s); 
          if (fstNode.getNodeType() == Node.ELEMENT_NODE) {                         
            Element fstElmnt = (Element) fstNode;            
            // kurs
            Element message = (Element) fstElmnt.getElementsByTagName("kurs").item(0);
            String text = (message.getTextContent().replace(",", "."));
            if (checkString_Float(text) == true) {
                this.kurs_start.setValue(Float.parseFloat(text));
            } else {
                this.kurs_start.setValue(1);
            }                                                
            // kurs_year_0
            message = (Element) fstElmnt.getElementsByTagName("kurs_year_0").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (checkString_Float(text) == true) {
                this.kurs_year_0.setValue(Float.parseFloat(text));
            } else {
                this.kurs_year_0.setValue(1);
            }                                                            
            // kurs_year_1
            message = (Element) fstElmnt.getElementsByTagName("kurs_year_1").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (checkString_Float(text) == true) {
                this.kurs_year_1.setValue(Float.parseFloat(text));
            } else {
                this.kurs_year_1.setValue(1);
            }                                                            
            // kurs_year_2
            message = (Element) fstElmnt.getElementsByTagName("kurs_year_2").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (checkString_Float(text) == true) {
                this.kurs_year_2.setValue(Float.parseFloat(text));
            } else {
                this.kurs_year_2.setValue(1);
            }                                                            
            // kurs_year_3
            message = (Element) fstElmnt.getElementsByTagName("kurs_year_3").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (checkString_Float(text) == true) {
                this.kurs_year_3.setValue(Float.parseFloat(text));
            } else {
                this.kurs_year_3.setValue(1);
            }                                                                        
            // kurs_year_4
            message = (Element) fstElmnt.getElementsByTagName("kurs_year_4").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (checkString_Float(text) == true) {
                this.kurs_year_4.setValue(Float.parseFloat(text));
            } else {
                this.kurs_year_4.setValue(1);
            }                                                                                                                        
            // koef_otsech
            message = (Element) fstElmnt.getElementsByTagName("koef_otsech").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (checkString_Float(text) == true) {
                this.koef_otsech.setValue(Float.parseFloat(text));
            } else {
                this.koef_otsech.setValue(1);
            }                                                                                                                                    
          }
        }
        
        nodeLst = doc.getElementsByTagName("dopoln");        
        for (int s = 0; s < nodeLst.getLength(); s++) {
          Node fstNode = nodeLst.item(s); 
          if (fstNode.getNodeType() == Node.ELEMENT_NODE) {                         
            Element fstElmnt = (Element) fstNode;            
            // bank_komiss_1
            Element message = (Element) fstElmnt.getElementsByTagName("bank_komiss_1").item(0);
            String text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.bank_komiss_1.setText(text);
            }
            // bank_komiss_2
            message = (Element) fstElmnt.getElementsByTagName("bank_komiss_2").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.bank_komiss_2.setText(text);
            }
            // stra_komiss_1
            message = (Element) fstElmnt.getElementsByTagName("stra_komiss_1").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.stra_komiss_1.setText(text);
            }
            // stra_komiss_2
            message = (Element) fstElmnt.getElementsByTagName("stra_komiss_2").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.stra_komiss_2.setText(text);
            }
            // stra_komiss_3
            message = (Element) fstElmnt.getElementsByTagName("stra_komiss_3").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.stra_komiss_3.setText(text);
            }
            // nota_komiss_1
            message = (Element) fstElmnt.getElementsByTagName("nota_komiss_1").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.nota_komiss_1.setText(text);
            }
            // nota_komiss_2
            message = (Element) fstElmnt.getElementsByTagName("nota_komiss_2").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.nota_komiss_2.setText(text);
            }
            // nota_komiss_3
            message = (Element) fstElmnt.getElementsByTagName("nota_komiss_3").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.nota_komiss_3.setText(text);
            }
            // nota_komiss_4
            message = (Element) fstElmnt.getElementsByTagName("nota_komiss_4").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.nota_komiss_4.setText(text);
            }
            // nota_komiss_5
            message = (Element) fstElmnt.getElementsByTagName("nota_komiss_5").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.nota_komiss_5.setText(text);
            }
            // riel_komiss_1
            message = (Element) fstElmnt.getElementsByTagName("riel_komiss_1").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.riel_komiss_1.setText(text);
            }
            // riel_komiss_2
            message = (Element) fstElmnt.getElementsByTagName("riel_komiss_2").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.riel_komiss_2.setText(text);
            }
            // riel_komiss_3
            message = (Element) fstElmnt.getElementsByTagName("riel_komiss_3").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.riel_komiss_3.setText(text);
            }

            // bank_komiss_1_text
            message = (Element) fstElmnt.getElementsByTagName("bank_komiss_1_text").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.bank_komiss_1_text.setText(text);
            }
            // bank_komiss_2_text
            message = (Element) fstElmnt.getElementsByTagName("bank_komiss_2_text").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.bank_komiss_2_text.setText(text);
            }
            // stra_komiss_1_text
            message = (Element) fstElmnt.getElementsByTagName("stra_komiss_1_text").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.stra_komiss_1_text.setText(text);
            }
            // stra_komiss_2_text
            message = (Element) fstElmnt.getElementsByTagName("stra_komiss_2_text").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.stra_komiss_2_text.setText(text);
            }
            // stra_komiss_3_text
            message = (Element) fstElmnt.getElementsByTagName("stra_komiss_3_text").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.stra_komiss_3_text.setText(text);
            }
            // nota_komiss_1_text
            message = (Element) fstElmnt.getElementsByTagName("nota_komiss_1_text").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.nota_komiss_1_text.setText(text);
            }
            // nota_komiss_2_text
            message = (Element) fstElmnt.getElementsByTagName("nota_komiss_2_text").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.nota_komiss_2_text.setText(text);
            }
            // nota_komiss_3_text
            message = (Element) fstElmnt.getElementsByTagName("nota_komiss_3_text").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.nota_komiss_3_text.setText(text);
            }
            // nota_komiss_4_text
            message = (Element) fstElmnt.getElementsByTagName("nota_komiss_4_text").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.nota_komiss_4_text.setText(text);
            }
            // nota_komiss_5_text
            message = (Element) fstElmnt.getElementsByTagName("nota_komiss_5_text").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.nota_komiss_5_text.setText(text);
            }
            // riel_komiss_1_text
            message = (Element) fstElmnt.getElementsByTagName("riel_komiss_1_text").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.riel_komiss_1_text.setText(text);
            }
            // riel_komiss_2_text
            message = (Element) fstElmnt.getElementsByTagName("riel_komiss_2_text").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.riel_komiss_2_text.setText(text);
            }
            // riel_komiss_3_text
            message = (Element) fstElmnt.getElementsByTagName("riel_komiss_3_text").item(0);
            text = (message.getTextContent().replace(",", "."));
            if (text.isEmpty() == false) {
                this.riel_komiss_3_text.setText(text);
            }            
          }
        }        
        
        // Расрочка описание годов
        Date mDate = (Date) this.date_cred.getValue();        
        LocalDate localDate = mDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();        
        int mYear = localDate.getYear();
        this.year_0.setText(Integer.toString(mYear));
        this.year_1.setText(Integer.toString(++mYear));
        this.year_2.setText(Integer.toString(++mYear));        
        this.year_3.setText(Integer.toString(++mYear));                
        this.year_4.setText(Integer.toString(++mYear));   

        // Расчет суммы эквивалента
        this.summa_ekv.setValue(getObjectFloatNaN(this.summa.getValue()) * getObjectFloatNaN(this.kurs.getValue()));        
        
        // Первоначальный взнос        
        if (this.proc_perv_vznos.getText().isEmpty() == true) {
            this.check_recalc.setSelected(true);
            this.perv_vznos.setEditable(true);        
            this.proc_perv_vznos.setEditable(false);
            this.proc_perv_vznos.setValue(null);
        }
        else {
            this.check_recalc.setSelected(false);
            this.perv_vznos.setEditable(false);        
            this.proc_perv_vznos.setEditable(true);                    
            this.perv_vznos.setValue(null);
        }
        // Сумма кредита
        double m_sum_cred;
        if (this.check_recalc.isSelected() == false) {
            m_sum_cred = getObjectFloatNaN(this.summa_ekv.getValue()) - getObjectFloatNaN(this.summa_ekv.getValue()) * getObjectFloatNaN(this.proc_perv_vznos.getValue()) / 100;        
        } else {
            m_sum_cred = getObjectFloatNaN(this.summa_ekv.getValue()) - getObjectFloatNaN(this.perv_vznos.getValue());        
        }
        if (m_sum_cred < 0) {m_sum_cred = 0;}
        this.sum_kred.setValue(m_sum_cred);
        
        // сохраняем переменные для пересчета
        q_perv_vznos = getObjectFloatNaN(this.perv_vznos.getValue());
        q_proc_perv_vznos = getObjectFloatNaN(this.proc_perv_vznos.getValue());
        
        // расчитываем поля которые в годах
        this.priv_srok_kred_year.setValue(getObjectFloatNaN(this.priv_srok_kred.getValue()) / 12);
        this.srok_kred_year.setValue(getObjectFloatNaN(this.srok_kred.getValue()) / 12);
        this.srok_kred_year_new.setValue(getObjectFloatNaN(this.srok_kred_new.getValue()) / 12);
        
                        
        } catch (Exception e) {
             e.printStackTrace();
             MessageBoxError(e.toString(), "");
          }
    }
    
    // Получить курс НБУ
    public float getKursNbu(String mCurrCode, Date mDate)
    {        
      LocalDate localDate = mDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();        
      DateTimeFormatter f = DateTimeFormatter.ofPattern ( "yyyyMMdd" );
      String tDate = localDate.format(f);      
      String mPath = tec_kat_temp;  
      String mPathXml = mPath + File.separator + tDate + ".xml";  
      
      // действия, если папка не существует, создаем                        
      if (new File(mPath).exists() == false) {      
         new File(mPath).mkdirs();
      }
      
      File file = new File(mPathXml);      
     
     // Если нет файла взять его с сайта
     if (file.exists() == false) {
         // чтение файла с НБУ       
         try {
             URL xmlURL = new URL("https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?&date=" + tDate);
             InputStream xml = xmlURL.openStream();
             DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
             DocumentBuilder db = dbf.newDocumentBuilder();
             Document doc = db.parse(xml);
             // сохранение на локальном диске
             Transformer transformer = TransformerFactory.newInstance().newTransformer();
             Source source = new DOMSource(doc);
	     Result result = new StreamResult(new FileOutputStream(mPathXml));
	     transformer.transform(source, result);                          
             xml.close(); 

             // перечитать созданный файл
             file = new File(mPathXml);             
         }
         catch (Exception e) {
             e.printStackTrace();
             MessageBoxError(e.toString(), "");
         }         
     }
          
     if (file.isFile()) {
      try {
        // чтение XML файла                
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();
        Document doc = db.parse(file);
        doc.getDocumentElement().normalize();        
        NodeList nodeLst = doc.getElementsByTagName("currency");        

        for (int s = 0; s < nodeLst.getLength(); s++) {
          Node fstNode = nodeLst.item(s); 
          if (fstNode.getNodeType() == Node.ELEMENT_NODE) { 
            Element fstElmnt = (Element) fstNode;
            Element message = (Element) fstElmnt.getElementsByTagName("cc").item(0);
            if (message.getTextContent().equals(mCurrCode)) {
              //
               message = (Element) fstElmnt.getElementsByTagName("rate").item(0);
               String text = (message.getTextContent().replace(",", "."));
               if (checkString_Float(text) == true) {
                  return Float.parseFloat(text);
               } else {
                  return 1;
               }                                                                           
            }
          }
        }
        } catch (Exception e) {
             e.printStackTrace();
             MessageBoxError(e.toString(), "");
        }
      }           
     return 0;
    }
    
    // Расчет доп. платежей
    public void Dop_plat()
    {
        //p_sum_year = 0;
        double p_calc;
        double m_summa_ekv = getObjectFloatNaN(this.summa_ekv.getValue()); 
        double m_sum_kred = getObjectFloatNaN(this.sum_kred.getValue());         
        // банк
        p_calc = Dop_plat_in(this.bank_komiss_1.getText(), m_summa_ekv, m_sum_kred);
        p_calc = p_calc + Dop_plat_in(this.bank_komiss_2.getText(), m_summa_ekv, m_sum_kred);
        this.bank_itog.setValue(getObjectFloatNaN(p_calc));
        // страхование       
        p_calc = Dop_plat_in(this.stra_komiss_1.getText(), m_summa_ekv, m_sum_kred);
        p_calc = p_calc + Dop_plat_in(this.stra_komiss_2.getText(), m_summa_ekv, m_sum_kred);
        p_calc = p_calc + Dop_plat_in(this.stra_komiss_3.getText(), m_summa_ekv, m_sum_kred);
        this.strax_itog.setValue(getObjectFloatNaN(p_calc));
        // оформление       
        p_calc = Dop_plat_in(this.nota_komiss_1.getText(), m_summa_ekv, m_sum_kred);
        p_calc = p_calc + Dop_plat_in(this.nota_komiss_2.getText(), m_summa_ekv, m_sum_kred);
        p_calc = p_calc + Dop_plat_in(this.nota_komiss_3.getText(), m_summa_ekv, m_sum_kred);
        p_calc = p_calc + Dop_plat_in(this.nota_komiss_4.getText(), m_summa_ekv, m_sum_kred);
        p_calc = p_calc + Dop_plat_in(this.nota_komiss_5.getText(), m_summa_ekv, m_sum_kred);
        this.notar_itog.setValue(getObjectFloatNaN(p_calc));
        // прочее       
        p_calc = Dop_plat_in(this.riel_komiss_1.getText(), m_summa_ekv, m_sum_kred);
        p_calc = p_calc + Dop_plat_in(this.riel_komiss_2.getText(), m_summa_ekv, m_sum_kred);
        p_calc = p_calc + Dop_plat_in(this.riel_komiss_3.getText(), m_summa_ekv, m_sum_kred);
        this.rieltor_itog.setValue(getObjectFloatNaN(p_calc));
        // итого
        this.sum_dop_plat.setValue(getObjectFloatNaN(this.bank_itog.getValue()) + 
                                   getObjectFloatNaN(this.strax_itog.getValue()) +
                                   getObjectFloatNaN(this.notar_itog.getValue()) + 
                                   getObjectFloatNaN(this.rieltor_itog.getValue()));        
    }

        // Расчет месячных и годовых платежей        
        public double Dop_plat_in_month_year(double t_sum_kred, String t_value_find)
        {
            // MONTH or YEAR
            if (!"%MONTH".equals(t_value_find) && !"%YEAR".equals(t_value_find)) {
                MessageBoxError("Тип не %MONTH или %YEAR", "");
                return 0;
            }
            
            double sum_out = 0;
            double m_summa_ekv = getObjectFloatNaN(this.summa_ekv.getValue());            
            String tt = this.bank_komiss_1.getText();
            if (tt.contains(t_value_find)) { sum_out = sum_out + Dop_plat_in(tt, m_summa_ekv, t_sum_kred); }
            tt = this.bank_komiss_2.getText();
            if (tt.contains(t_value_find)) { sum_out = sum_out + Dop_plat_in(tt, m_summa_ekv, t_sum_kred); }            
            tt = this.stra_komiss_1.getText();
            if (tt.contains(t_value_find)) { sum_out = sum_out + Dop_plat_in(tt, m_summa_ekv, t_sum_kred); }
            tt = this.stra_komiss_2.getText();
            if (tt.contains(t_value_find)) { sum_out = sum_out + Dop_plat_in(tt, m_summa_ekv, t_sum_kred); }
            tt = this.stra_komiss_3.getText();
            if (tt.contains(t_value_find)) { sum_out = sum_out + Dop_plat_in(tt, m_summa_ekv, t_sum_kred); }
            tt = this.nota_komiss_1.getText();
            if (tt.contains(t_value_find)) { sum_out = sum_out + Dop_plat_in(tt, m_summa_ekv, t_sum_kred); }
            tt = this.nota_komiss_2.getText();
            if (tt.contains(t_value_find)) { sum_out = sum_out + Dop_plat_in(tt, m_summa_ekv, t_sum_kred); }
            tt = this.nota_komiss_3.getText();
            if (tt.contains(t_value_find)) { sum_out = sum_out + Dop_plat_in(tt, m_summa_ekv, t_sum_kred); }
            tt = this.nota_komiss_4.getText();
            if (tt.contains(t_value_find)) { sum_out = sum_out + Dop_plat_in(tt, m_summa_ekv, t_sum_kred); }
            tt = this.nota_komiss_5.getText();
            if (tt.contains(t_value_find)) { sum_out = sum_out + Dop_plat_in(tt, m_summa_ekv, t_sum_kred); }
            tt = this.riel_komiss_1.getText();
            if (tt.contains(t_value_find)) { sum_out = sum_out + Dop_plat_in(tt, m_summa_ekv, t_sum_kred); }
            tt = this.riel_komiss_2.getText();
            if (tt.contains(t_value_find)) { sum_out = sum_out + Dop_plat_in(tt, m_summa_ekv, t_sum_kred); }
            tt = this.riel_komiss_3.getText();
            if (tt.contains(t_value_find)) { sum_out = sum_out + Dop_plat_in(tt, m_summa_ekv, t_sum_kred); }
            return sum_out;
        }
        
        // Доп. платежи автоподстановки
        public double Dop_plat_in(String t_in, double t_summa_ekv, double t_sum_kred)
	{
            String n = t_in;
            double s = t_summa_ekv;
            double s_kred = t_sum_kred;
            double pl;
            double sum_out;
            //boolean p_is_year;
            //boolean p_is_month;

	    if (s < 0 || s_kred < 0) { return -1; }
            
            // оплата ежегодно
            //p_is_year = false;
	    if (n.contains("%YEAR")) { n = n.replace("%YEAR", ""); /*p_is_year = true;*/ }
            // оплата ежемесяно
            //p_is_month = false;
            if (n.contains("%MONTH")) { n = n.replace("%MONTH", ""); /*p_is_month = true;*/ }
            // процент от суммы кредита
            if (n.contains("%S"))
	    {
                n = n.replace("%S", "");
                pl = getString_Float(n);
                if (s != 0) {                    
                    DecimalFormat df = new DecimalFormat("#.##");
                    df.setRoundingMode(RoundingMode.CEILING);
                    sum_out = getString_Float(df.format((pl * s_kred) / 100));
                }
                else {
                    sum_out = 0;
                }
            }
            // процент от суммы квартиры
            else if (n.contains("%F"))
            {
                n = n.replace("%F", "");
                pl = getString_Float(n);
                if (s_kred != 0) {
                    DecimalFormat df = new DecimalFormat("#.##");
                    df.setRoundingMode(RoundingMode.CEILING);                    
                    sum_out = getString_Float(df.format((pl * s) / 100));
                }
                else {
                    sum_out = 0;
                }
	    }
            else {
                // просто сумма
                sum_out = getString_Float(n);
	    }
	    //if (p_is_year == true) { p_sum_year = sum_out + p_sum_year; }
            //if (p_is_month == true) { p_sum_month = sum_out + p_sum_month; }

            return sum_out;
        } 
        
        // Расчет и вывод таблицы
        public void Paint_table()
        {   
            // чистка таблицы
            DefaultTableModel tableModel = (DefaultTableModel) this.jTable1.getModel();
            while (tableModel.getRowCount()>0) {
             tableModel.removeRow(0);
            }
                     
           // ссылка для добавления строк
           DefaultTableModel model = (DefaultTableModel) this.jTable1.getModel();           
               
            int i;
            double m_sum_kred = getObjectFloatNaN(this.sum_kred.getValue());
            double m_proc_stavka = getObjectFloatNaN(this.proc_stavka.getValue());            
            double m_priv_proc_stavka = getObjectFloatNaN(this.priv_proc_stavka.getValue());
            double m_srok = getObjectFloatNaN(this.srok_kred.getValue());
            double m_priv_srok = getObjectFloatNaN(this.priv_srok_kred.getValue());            
            String m_type_proc = this.type_proc.getSelectedItem().toString();
            String m_type_annuitet = this.type_annuitet.getSelectedItem().toString();
            double m_koef_otsech = getObjectFloatNaN(this.koef_otsech.getValue());
            // единоразовые
            double m_sum_one = getObjectFloatNaN(this.sum_dop_plat.getValue());

            if (m_sum_kred == 0) {
		MessageBoxError("Расчет и вывод графика невозможен !!! Не расчитана СУММА КРЕДИТА!!!", "");
		return;
	    }
                        
            // Аннуитет
            if ("аннуитетная".equals(m_type_proc))
            {
                // расчет кредитного портфеля
                int zn = 0; int zc = 0;
                if (null != m_type_annuitet) // Расчитываем процентную ставку выраженную в долях
                switch (m_type_annuitet) {
                    case "30/360":
                        zc = 30; zn = 360; break;
                    case "факт/360":
                        zc = LastDayOfMonth(this.date_cred.getValue()); zn = 360; break;
                    case "факт/факт":
                        zc = LastDayOfMonth(this.date_cred.getValue()); zn = KolDayOfYear(this.date_cred.getValue()); break;
                    default: break;
                }
                
                // если % ставка = 0, ставим не 0
                if (m_proc_stavka <= 0) { m_proc_stavka = 0.000001; }

                //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                // Без льготного периода
                if (m_priv_srok == 0) 
                {                    
                    m_proc_stavka = (m_proc_stavka * 0.01 / zn) * zc;
                    // Сумма аннуитетного платежа
                    double annuitet = m_sum_kred * m_proc_stavka / (1 - Math.pow(1 + m_proc_stavka, -1 * m_srok));
                    // Переплата по кредиту
                    double m_sum_plat = getObjectFloatNaN(this.sum_plat.getValue());
                    double sum_pereplata = 0;
                    if (m_sum_plat > annuitet) 
                    {
                        sum_pereplata = m_sum_plat - annuitet;
                        annuitet = m_sum_plat;
                    }                    
                    //
                    double summ = m_sum_kred;
                    Date d_date = (Date) this.date_cred.getValue();                    
                    double summ_pro = m_sum_kred * m_proc_stavka;
                    double n_pr = 0;
                    double n_ob = annuitet * m_srok + m_sum_one;
                    double summ_dop = 0;
                    int srok_new = 0;
                    
                    for (i = 1; i <= m_srok; i++)
                    {
                        // учет ежегодных
                        double m_sum_year = 0;                        
                        if ((i - 1) % 12 == 0 && i != 1)
                        {
                         m_sum_year = Dop_plat_in_month_year(summ, "%YEAR");
                        }
                        // учет ежемесяных
                        double m_sum_month = Dop_plat_in_month_year(summ, "%MONTH");
                        // добавляем строку                                                
                        model.addRow(new Object[]                                                                                                                          
                        {
                            Get_date_month(d_date),
                            Double_to_String(summ),
                            Double_to_String(summ_pro),
                            Double_to_String(annuitet - summ_pro),
                            Double_to_String(sum_pereplata),
                            Double_to_String(m_sum_one + m_sum_year + m_sum_month),
                            Double_to_String(annuitet + m_sum_one + m_sum_year + m_sum_month)
                        });
                        
                        // +1 месяц
                        LocalDateTime localDateTime = d_date.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
                        localDateTime = localDateTime.plusMonths(1);
                        d_date = Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());                                        
                        //
                        summ = summ - annuitet + m_proc_stavka * summ;
                        n_pr = n_pr + summ_pro + m_sum_one;
                        summ_pro = summ * m_proc_stavka;
                        summ_dop = summ_dop + m_sum_one + m_sum_year + m_sum_month;
                        m_sum_one = 0;
                        if (summ < 0) { break; }
                        srok_new = srok_new + 1;
                    }

                    this.srok_kred_new.setValue(srok_new);
                    this.srok_kred_year_new.setValue(Math.ceil((srok_new / 12)*100)/100);
                    
                    // Итого
                    model.addRow(new Object[]                                                                                                                          
                        {
                          "Итого:", "", Double_to_String(n_pr), Double_to_String(m_sum_kred), "", Double_to_String(summ_dop), Double_to_String(n_ob)
                        });                    
                    // Переплата
                    model.addRow(new Object[]                                                                                                                          
                        {
                          "Переплата:", "", "", "", "", "", Double_to_String(n_pr)
                        });                                        
                    this.pereplata.setValue(Math.ceil((n_pr + summ_dop)*100)/100);
                }
                //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                // С льготным периодом
                else
                {
                    if (m_priv_proc_stavka <= 0) { m_priv_proc_stavka = 0.000001; }
                    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                    // Льготный период
                    m_priv_proc_stavka = (m_priv_proc_stavka * 0.01 / zn) * zc;
                    // Сумма аннуитетного платежа
                    double annuitet = m_sum_kred * m_priv_proc_stavka / (1 - Math.pow(1 + m_priv_proc_stavka, -1 * m_srok));
                    
                    //
                    double summ = m_sum_kred;
                    Date d_date = (Date) this.date_cred.getValue();  
                    double summ_pro = m_sum_kred * m_priv_proc_stavka;
                    double n_pr = 0;
                    double n_ob = annuitet * m_srok + m_sum_one;
                    double summ_dop = 0;
                    for (i = 1; i <= m_priv_srok; i++)
                    {
                        // учет ежегодных
                        double m_sum_year = 0;                        
                        if ((i - 1) % 12 == 0 && i != 1)
                        {
                            m_sum_year = Dop_plat_in_month_year(summ, "%YEAR");                            
                        }
                        // учет ежемесяных
                        double m_sum_month = Dop_plat_in_month_year(summ, "%MONTH");                        
                        // добавляем строку                                                
                        model.addRow(new Object[]                                                                                                                          
                        {
                            Get_date_month(d_date),
                            Double_to_String(summ),
                            Double_to_String(summ_pro),
                            Double_to_String(annuitet - summ_pro),
                            "0.00",
                            Double_to_String(m_sum_one + m_sum_year + m_sum_month),
                            Double_to_String(annuitet + m_sum_one + m_sum_year + m_sum_month)
                        });
                        
                        // +1 месяц
                        LocalDateTime localDateTime = d_date.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
                        localDateTime = localDateTime.plusMonths(1);
                        d_date = Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());                                        
                        //
                        summ = summ - annuitet + m_priv_proc_stavka * summ;
                        n_pr = n_pr + summ_pro + m_sum_one;
                        summ_pro = summ * m_priv_proc_stavka;
                        summ_dop = summ_dop + m_sum_one + m_sum_year + m_sum_month;
                        m_sum_one = 0;
                        if (summ < 0) { break; }
                    }
                    
                    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                    // Обычный период
                    m_srok = m_srok - m_priv_srok;
                    m_proc_stavka = (m_proc_stavka * 0.01 / zn) * zc;
                    // Сумма аннуитетного платежа
                    annuitet = summ * m_proc_stavka / (1 - Math.pow(1 + m_proc_stavka, -1 * m_srok));
                    //
                    summ_pro = summ * m_proc_stavka;
                    n_ob = n_ob + (annuitet * m_srok);
                    for (i = 1; i <= m_srok; i++)
                    {
                        // учет ежегодных
                        double m_sum_year = 0;
                        m_sum_year = 0;
                        if ((i - 1) % 12 == 0 && i != 1)
                        {
                            m_sum_year = Dop_plat_in_month_year(summ, "%YEAR");                         
                        }
                        // учет ежемесяных
                        double m_sum_month = Dop_plat_in_month_year(summ, "%MONTH"); 
                        // добавляем строку                                                
                        model.addRow(new Object[]                                                                                                                          
                        {
                            Get_date_month(d_date),
                            Double_to_String(summ),
                            Double_to_String(summ_pro),
                            Double_to_String(annuitet - summ_pro),
                            "0.00",
                            Double_to_String(m_sum_one + m_sum_year + m_sum_month),
                            Double_to_String(annuitet + m_sum_one + m_sum_year + m_sum_month)
                        });
                        
                        // +1 месяц
                        LocalDateTime localDateTime = d_date.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
                        localDateTime = localDateTime.plusMonths(1);
                        d_date = Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());                                        
                        //
                        summ = summ - annuitet + m_proc_stavka * summ;
                        n_pr = n_pr + summ_pro + m_sum_one;
                        summ_pro = summ * m_proc_stavka;
                        summ_dop = summ_dop + m_sum_one + m_sum_year + m_sum_month;
                        m_sum_one = 0;
                        if (summ < 0) { break; }
                    }
                    
                    // Итого
                    model.addRow(new Object[]                                                                                                                          
                        {
                          "Итого:", "", Double_to_String(n_pr), Double_to_String(m_sum_kred), "", Double_to_String(summ_dop), Double_to_String(n_ob)
                        });                    
                    // Переплата
                    model.addRow(new Object[]                                                                                                                          
                        {
                          "Переплата:", "", "", "", "", "", Double_to_String(n_pr)
                        });                                        
                    this.pereplata.setValue(Math.ceil((n_pr + summ_dop)*100)/100);                                        
                }
            }    
            
            //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            // Стандартный
            if ("классика".equals(m_type_proc))
            {				
		double summ = m_sum_kred;
                double summ_graf = m_sum_kred;
                double n_pr = 0;
		double n_ob = 0;
                double n_cred = 0;
                double n_perepl = 0;
                double sum_year;
                double pr;
                double summ_dop = 0;
                double m_sum_plat = getObjectFloatNaN(this.sum_plat.getValue());
                String[] mass_date = new String[(int) m_srok];
                double[][] mass_num = new double[6][(int) m_srok];
                double zc = 0;
                double zn = 0;
                double sum_pereplata = 0;
                int srok_new;

                // платежи кредит
                Date d_date = (Date) this.date_cred.getValue(); 
                for (i = 1; i <= m_srok; i++)
		{                    
                    if (null != m_type_annuitet) // Расчитываем процентную ставку выраженную в долях
                    switch (m_type_annuitet) {
                        case "30/360":
                            zc = 30; zn = 360; break;
                        case "факт/360":
                            zc = LastDayOfMonth(d_date); zn = 360; break;
                        case "факт/факт":
                            zc = LastDayOfMonth(d_date); zn = KolDayOfYear(d_date); break;
                        default: break;
                    }                    

                    // льготная
                    if (i <= m_priv_srok) {
                        pr = summ_graf * m_priv_proc_stavka * (zc/zn) / 100;
                    }
                    // обычная
                    else {
                        pr = summ_graf * m_proc_stavka * (zc / zn) / 100;
                    }
                     
                    // учет ежегодных
                    sum_year = 0;
                    if ((i - 1) % 12 == 0 && i != 1)
                    {
                        sum_year = Dop_plat_in_month_year(summ_graf, "%YEAR");
                    }
                    // учет ежемесяных
                    double sum_month = Dop_plat_in_month_year(summ_graf, "%MONTH");
                    // учет переплаты
                    double calc_sum_cred = m_sum_kred / m_srok;
                    double sum_itog = Math.ceil((calc_sum_cred + pr + m_sum_one + sum_year + sum_month)*100)/100;

                    mass_date[i - 1] = Get_date_month(d_date);
                    mass_num[0][i - 1] = Math.ceil(summ*100)/100;
                    mass_num[1][i - 1] = Math.ceil(pr*100)/100;
                    mass_num[2][i - 1] = Math.ceil(calc_sum_cred*100)/100;
                    mass_num[3][i - 1] = Math.ceil((m_sum_one + sum_year + sum_month)*100)/100;                    
                    mass_num[5][i - 1] = 0;

                    if (m_sum_plat > Math.ceil((calc_sum_cred + pr)*100)/100)
                    {
                        sum_pereplata = m_sum_plat - Math.ceil((calc_sum_cred + pr)*100)/100; // переплата
                        mass_num[5][i - 1] = sum_pereplata;
                        // если последний платеж, корректируем переплату
                        if (summ - (m_sum_plat - Math.ceil(pr*100)/100) <= 0)
                        {
                            sum_pereplata = 0;
                            calc_sum_cred = summ;
                            mass_num[2][i - 1] = calc_sum_cred;
                            mass_num[5][i - 1] = sum_pereplata;
                            // пересчет %
                            if (null != m_type_annuitet) // Расчитываем процентную ставку выраженную в долях
                            switch (m_type_annuitet) {
                                case "30/360":
                                    zc = 30; zn = 360; break;
                                case "факт/360":
                                    zc = LastDayOfMonth(d_date); zn = 360; break;
                                case "факт/факт":
                                    zc = LastDayOfMonth(d_date); zn = KolDayOfYear(d_date); break;
                                default: break;
                                }

                            // льготная
                            if (i <= m_priv_srok) {
                                pr = summ * m_priv_proc_stavka * (zc / zn) / 100;
                            }
                            // обычная
                            else {
                                pr = summ * m_proc_stavka * (zc / zn) / 100;
                            }

                            mass_num[1][i - 1] = Math.ceil(pr*100)/100;
                            sum_itog = Math.ceil((calc_sum_cred + pr + m_sum_one + sum_year + sum_month)*100)/100;
                            ///////////////////////////////////////////////////////////////////////////
                        }
                        summ = summ - (m_sum_plat - Math.ceil(pr*100)/100);
                    }
                    else
                    {
                        summ = summ - Math.ceil(calc_sum_cred*100)/100;
                    }

                    mass_num[4][i - 1] = sum_itog + sum_pereplata;
                    summ_graf = summ_graf - Math.ceil(calc_sum_cred*100)/100;                    
                    // +1 месяц
                    LocalDateTime localDateTime = d_date.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
                    localDateTime = localDateTime.plusMonths(1);
                    d_date = Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());                                        
                    //                    
                    n_pr = n_pr + pr;
                    n_ob = n_ob + calc_sum_cred + pr + m_sum_one + sum_pereplata;
                    n_cred = n_cred + calc_sum_cred;
                    n_perepl = n_perepl + sum_pereplata;
                    summ_dop = summ_dop + m_sum_one + sum_year + sum_month;
                    m_sum_one = 0;
                    if (summ < 0) { break; } 
                }
                //
                srok_new = 0;
                for (i = 1; i <= m_srok; i++)
                {
                    if (mass_num[2][i - 1] == 0) { break; }

                    // добавляем строку                                                
                        model.addRow(new Object[]                                                                                                                          
                        {
                            mass_date[i - 1],
                            Double_to_String(mass_num[0][i - 1]),
                            Double_to_String(mass_num[1][i - 1]),
                            Double_to_String(mass_num[2][i - 1]),
                            Double_to_String(mass_num[5][i - 1]),
                            Double_to_String(mass_num[3][i - 1]),
                            Double_to_String(mass_num[4][i - 1])                            
                        });                        
                    srok_new = srok_new + 1;
                }

                this.srok_kred_new.setValue(srok_new);
                this.srok_kred_year_new.setValue(Math.ceil((srok_new / 12)*100)/100);
                    
                // Итого
                model.addRow(new Object[]                                                                                                                          
                    {
                      "Итого:", 
                      "", 
                      Double_to_String(n_pr), 
                      Double_to_String(n_cred), 
                      Double_to_String(n_perepl), 
                      Double_to_String(summ_dop), 
                      Double_to_String(n_ob)
                    });                    
                // Переплата
                model.addRow(new Object[]                                                                                                                          
                    {
                      "Переплата:", "", "", "", "", "", Double_to_String(Math.ceil((n_pr + summ_dop)*100)/100)
                    });                                        
                this.pereplata.setValue(Math.ceil((n_pr + summ_dop)*100)/100);                                                                                                                                           
            }            
           //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            // Рассрочка
            if ("рассрочка".equals(m_type_proc))
            {
                double summ = m_sum_kred;
                double summ_graf = m_sum_kred;
                double n_pr = 0;
                double n_ob = 0;
                double n_cred = 0;
                double n_perepl = 0;
                double sum_year;
                double pr;
                double nk;
                double summ_dop = 0;
                double m_sum_plat = getObjectFloatNaN(this.sum_plat.getValue());
                String[] mass_date = new String[(int) m_srok];
                double[][] mass_num = new double[6][(int) m_srok];
                double sum_pereplata = 0;
                int srok_new;
                double m_kurs_start = getObjectFloatNaN(this.kurs_start.getValue());
                double m_kurs_year_0 = getObjectFloatNaN(this.kurs_year_0.getValue());
                double m_kurs_year_1 = getObjectFloatNaN(this.kurs_year_1.getValue());
                double m_kurs_year_2 = getObjectFloatNaN(this.kurs_year_2.getValue());
                double m_kurs_year_3 = getObjectFloatNaN(this.kurs_year_3.getValue());
                double m_kurs_year_4 = getObjectFloatNaN(this.kurs_year_4.getValue());

                // платежи кредит
                Date d_date = (Date) this.date_cred.getValue(); 
                Date d_date_etalon = (Date) this.date_cred.getValue(); 
                for (i = 1; i <= m_srok; i++)
                {
                    // начальный год
                    if (Get_YEAR(d_date, 0) == Get_YEAR(d_date_etalon, 0)) { 
                        nk = m_kurs_year_0 / m_kurs_start; 
                    }
                    else if (Get_YEAR(d_date, 0) == Get_YEAR(d_date_etalon, 1)) { 
                        nk = m_kurs_year_1 / m_kurs_start;
                    }
                    else if (Get_YEAR(d_date, 0) == Get_YEAR(d_date_etalon, 2)) {
                        nk = m_kurs_year_2 / m_kurs_start;                        
                    }
                    else if (Get_YEAR(d_date, 0) == Get_YEAR(d_date_etalon, 3)) {
                        nk = m_kurs_year_3 / m_kurs_start;                        
                    }
                    else if (Get_YEAR(d_date, 0) == Get_YEAR(d_date_etalon, 4) || Get_YEAR(d_date, 0) > Get_YEAR(d_date_etalon, 4)) {
                        nk = m_kurs_year_4 / m_kurs_start;                        
                    }
                    else { nk = 0; }
                    
                    if (nk <= m_koef_otsech) { nk = 1; }
                    pr = (nk - 1) * (m_sum_kred / m_srok);                                        

                    // учет ежегодных
                    sum_year = 0;
                    if ((i - 1) % 12 == 0 && i != 1)
                    {
                        sum_year = Dop_plat_in_month_year(summ_graf, "%YEAR");                        
                    }
                    // учет ежемесяных
                    double sum_month = Dop_plat_in_month_year(summ_graf, "%MONTH");
                    // учет переплаты
                    double calc_sum_cred = m_sum_kred / m_srok;
                    double sum_itog = Math.ceil((calc_sum_cred + pr + m_sum_one + sum_year + sum_month)*100)/100;

                    mass_date[i - 1] = Get_date_month(d_date);
                    mass_num[0][i - 1] = Math.ceil(summ*100)/100;
                    mass_num[1][i - 1] = Math.ceil(pr*100)/100;
                    mass_num[2][i - 1] = Math.ceil(calc_sum_cred*100)/100;
                    mass_num[3][i - 1] = Math.ceil((m_sum_one + sum_year + sum_month)*100)/100;
                    mass_num[5][i - 1] = 0;

                    if (m_sum_plat > Math.ceil((calc_sum_cred + pr)*100)/100)
                    {
                        sum_pereplata = m_sum_plat - Math.ceil((calc_sum_cred + pr)*100)/100; // переплата
                        mass_num[5][i - 1] = sum_pereplata;
                        // если последний платеж, корректируем переплату
                        if (summ - (m_sum_plat - Math.ceil(pr*100)/100) <= 0)
                        {
                            sum_pereplata = 0;
                            calc_sum_cred = summ;
                            mass_num[2][i - 1] = calc_sum_cred;
                            mass_num[5][i - 1] = sum_pereplata;
                            // пересчет %

                            // начальный год
                            if (Get_YEAR(d_date, 0) == Get_YEAR(d_date_etalon, 0)) { 
                                nk = m_kurs_year_0 / m_kurs_start; 
                            }
                            else if (Get_YEAR(d_date, 0) == Get_YEAR(d_date_etalon, 1)) { 
                                nk = m_kurs_year_1 / m_kurs_start;
                            }
                            else if (Get_YEAR(d_date, 0) == Get_YEAR(d_date_etalon, 2)) {
                                nk = m_kurs_year_2 / m_kurs_start;                        
                            }
                            else if (Get_YEAR(d_date, 0) == Get_YEAR(d_date_etalon, 3)) {
                                nk = m_kurs_year_3 / m_kurs_start;                        
                            }
                            else if (Get_YEAR(d_date, 0) == Get_YEAR(d_date_etalon, 4) || Get_YEAR(d_date, 0) > Get_YEAR(d_date_etalon, 4)) {
                                nk = m_kurs_year_4 / m_kurs_start;                        
                            }
                            else { nk = 0; }

                            if (nk <= m_koef_otsech) { nk = 1; }
                            pr = (nk - 1) * (calc_sum_cred);                                                                                                

                            mass_num[1][i - 1] = Math.ceil(pr*100)/100;
                            sum_itog = Math.ceil((calc_sum_cred + pr + m_sum_one + sum_year + sum_month)*100)/100;
                            ///////////////////////////////////////////////////////////////////////////
                        }
                        summ = summ - (m_sum_plat - Math.ceil(pr*100)/100);
                    }
                    else
                    {
                        summ = summ - Math.ceil(calc_sum_cred*100)/100;
                    }

                    mass_num[4][i - 1] = sum_itog + sum_pereplata;

                    summ_graf = summ_graf - Math.ceil(calc_sum_cred*100)/100;
                    // +1 месяц
                    LocalDateTime localDateTime = d_date.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
                    localDateTime = localDateTime.plusMonths(1);
                    d_date = Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());                                        
                    //
                    n_pr = n_pr + pr;
                    n_ob = n_ob + calc_sum_cred + pr + m_sum_one + sum_pereplata;
                    n_cred = n_cred + calc_sum_cred;
                    n_perepl = n_perepl + sum_pereplata;
                    summ_dop = summ_dop + m_sum_one + sum_year + sum_month;
                    m_sum_one = 0;
                    if (summ < 0) { break; }
                }
                //
                srok_new = 0;
                for (i = 1; i <= m_srok; i++)
                {
                    if (mass_num[2][i - 1] == 0) { break; }

                    // добавляем строку                                                
                    model.addRow(new Object[]                                                                                                                          
                    {
                        mass_date[i - 1],
                        Double_to_String(mass_num[0][i - 1]),
                        Double_to_String(mass_num[1][i - 1]),
                        Double_to_String(mass_num[2][i - 1]),
                        Double_to_String(mass_num[5][i - 1]),
                        Double_to_String(mass_num[3][i - 1]),
                        Double_to_String(mass_num[4][i - 1])                            
                    });                                         
                    srok_new = srok_new + 1;
                }

                this.srok_kred_new.setValue(srok_new);
                this.srok_kred_year_new.setValue(Math.ceil((srok_new / 12)*100)/100);
                    
                // Итого
                model.addRow(new Object[]                                                                                                                          
                    {
                      "Итого:", 
                      "", 
                      Double_to_String(n_pr), 
                      Double_to_String(n_cred), 
                      Double_to_String(n_perepl), 
                      Double_to_String(summ_dop), 
                      Double_to_String(n_ob)
                    });                    
                // Переплата
                model.addRow(new Object[]                                                                                                                          
                    {
                      "Переплата:", "", "", "", "", "", Double_to_String(Math.ceil((n_pr + summ_dop)*100)/100)
                    });                                        
                this.pereplata.setValue(Math.ceil((n_pr + summ_dop)*100)/100);                                                                                                                                                           
            } 
            
           // настраиваем выравнивание и цвет
           // написан свой рендер
           this.jTable1.setDefaultRenderer(Object.class, new MyColorCellRenderer());            
        }  
        
        public class MyColorCellRenderer extends DefaultTableCellRenderer { 
            @Override 
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) 
            { 
             super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column); 
                                                    
             if (row == table.getRowCount() - 1) // переплата
             { 
               setBackground(new Color(173, 216, 230)); // светло-синий
             } 
             else if (row == table.getRowCount() - 2) // итого
             { 
               setBackground(new Color(144, 238, 144)); // светло-зеленый
             }
             else {
                    String m_value = (String) table.getModel().getValueAt(row, 0);
                    m_value = m_value.substring(0, 4);
                    int m_value_int = Integer.parseInt(m_value);
                    if (m_value_int%2==0) {
                      setBackground(new Color(255, 228, 225)); // светло-розовый             
                    }
                    else {
                      setBackground(new Color(240, 248, 255)); // голубой               
                    }                                  
             }                          
             //setBackground(getBackground());
             
             // выравнивание
             setHorizontalAlignment(SwingConstants.RIGHT);             
             
             return this; 
            } 
        } 

        public void exportToCSV(JTable tableToExport, String pathToExportTo) {
            try {
                TableModel model = tableToExport.getModel();
                //FileWriter csv = new FileWriter(new File(pathToExportTo));
                OutputStreamWriter csv = new OutputStreamWriter(new FileOutputStream(pathToExportTo, false), Charset.forName("CP1251"));

                // столбцы
                for (int i = 0; i < model.getColumnCount(); i++) {
                    csv.write(model.getColumnName(i) + ";");
                }
                csv.write("\n");
                // строки
                for (int i = 0; i < model.getRowCount(); i++) {
                    for (int j = 0; j < model.getColumnCount(); j++) {
                        String mText = model.getValueAt(i, j).toString().replaceAll("\u00A0","").trim();
                        csv.write(mText + ";");
                    }
                    csv.write("\n");
                }
                csv.close();
            } catch (IOException e) {
                e.printStackTrace();
                MessageBoxError(e.toString(), "");
            }            
        }        
    
        // FileNameFilter implementation
	public static class MyFileNameFilter implements FilenameFilter 
        {
		private String ext;
		public MyFileNameFilter(String ext) {
			this.ext = ext.toLowerCase();
		}
		@Override
		public boolean accept(File dir, String name) {
			return name.toLowerCase().endsWith(ext);
		}
	}
        
        public boolean checkString_Float(String string) 
        {
           String string_new  = string.replace(",", ".");
           if (string_new.isEmpty() == true) { return false; }
           try {               
               Float.parseFloat(string_new);
           } catch (Exception e) {
           return false;
           }
           return true;
        }
        
        public float getString_Float(String string) 
        {           
           String string_new  = string.replace(",", ".");
           if (string_new.isEmpty() == true) { return 0; }
           try {               
               Float m_float = Float.parseFloat(string_new);
               return m_float;
           } catch (Exception e) {
             return 0;
           }
        }
        
        public float getObjectFloatNaN(Object string) 
        {       
           if (string == null) { return 0; }            
           String string_new  = string.toString();           
           return getString_Float(string_new);           
        }
        
        public boolean isDateValid(String m_date) 
        {
         if (m_date.isEmpty() == true) { return false; }            
         try {             
             DateTimeFormatter f = DateTimeFormatter.ofPattern ( "dd.MM.yyyy" );
             LocalDate ldate = LocalDate.parse ( m_date , f );             
             return true;
         } catch (Exception e) {
            return false;
           }
        } 
         
        public Date getDateString(String m_date) 
        {  
            if (isDateValid(m_date) == false) { return null; }
            DateTimeFormatter f = DateTimeFormatter.ofPattern ( "dd.MM.yyyy" );
            LocalDate ldate = LocalDate.parse ( m_date , f );
            Date date = Date.from(ldate.atStartOfDay(ZoneId.systemDefault()).toInstant());
            return date;
        } 
        
        // вывод диалогового окна
        public static void MessageBox(String infoMessage, String titleBar)
        {
           JOptionPane.showMessageDialog(null, infoMessage, "InfoBox: " + titleBar, JOptionPane.INFORMATION_MESSAGE);
        } 
        
        // вывод диалогового окна
        public static void MessageBoxError(String infoMessage, String titleBar)
        {
           JOptionPane.showMessageDialog(null, infoMessage, "InfoBox: " + titleBar, JOptionPane.ERROR_MESSAGE);
        } 
        
        public int LastDayOfMonth(Object string)
        {
            Date d_date = (Date) string;
            LocalDate localDate = d_date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            localDate = localDate.with(TemporalAdjusters.lastDayOfMonth());
            return localDate.getDayOfMonth();
        }

        public int KolDayOfYear(Object string)
        {
            Date d_date = (Date) string;
            LocalDate localDate = d_date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            localDate = localDate.with(TemporalAdjusters.lastDayOfYear());
            return localDate.getDayOfYear();
        }
        
        public String Get_date_month(Object string)
        {
	    Date d_date = (Date) string;
            LocalDate localDate = d_date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();                                        
            return Integer.toString(localDate.getYear())+ "." + String.format("%02d", localDate.getMonthValue());
	}

        public int Get_YEAR(Object string, int add_year)
        {
	    Date d_date = (Date) string;
            LocalDate localDate = d_date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();                                        
            return localDate.getYear() + add_year;
	}
        
        public String Double_to_String(double string)
        {	
          DecimalFormat df = new DecimalFormat("#,##0.00");
          df.setRoundingMode(RoundingMode.CEILING);                    
          return df.format(string);                      
        }
        
    // * @param args the command line arguments
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */        
        try {            
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Kred_calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Kred_calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Kred_calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Kred_calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
               
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Kred_calculator().setVisible(true);
            }
        });
    }
    
    public static String[] file_path_ini_mas;
    public static String[] type_ini_mas;
    public static boolean is_program_loading = true;
    public static String tec_kat = new File("").getAbsolutePath();
    public static String tec_kat_ini = tec_kat + /*File.separator + "dist" +*/ File.separator + "ini" + File.separator;
    public static String tec_kat_temp = tec_kat + /*File.separator + "dist" +*/ File.separator + "temp";
    public static float q_perv_vznos;        
    public static float q_proc_perv_vznos;  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField bank_itog;
    private javax.swing.JTextField bank_komiss_1;
    private javax.swing.JLabel bank_komiss_1_text;
    private javax.swing.JTextField bank_komiss_2;
    private javax.swing.JLabel bank_komiss_2_text;
    private javax.swing.JButton button_recalc;
    private javax.swing.JCheckBox check_recalc;
    private javax.swing.JComboBox<String> curr_code;
    private javax.swing.JFormattedTextField date_cred;
    private javax.swing.JButton jButton_ExportCSV;
    private javax.swing.JButton jButton_calc;
    private javax.swing.JButton jButton_ini_file;
    private javax.swing.JButton jButton_update;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanel_rasrochka;
    private javax.swing.JPanel jPanel_rasrochka1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JFormattedTextField koef_otsech;
    private javax.swing.JFormattedTextField kurs;
    private javax.swing.JFormattedTextField kurs_start;
    private javax.swing.JFormattedTextField kurs_year_0;
    private javax.swing.JFormattedTextField kurs_year_1;
    private javax.swing.JFormattedTextField kurs_year_2;
    private javax.swing.JFormattedTextField kurs_year_3;
    private javax.swing.JFormattedTextField kurs_year_4;
    private javax.swing.JTextField nota_komiss_1;
    private javax.swing.JLabel nota_komiss_1_text;
    private javax.swing.JTextField nota_komiss_2;
    private javax.swing.JLabel nota_komiss_2_text;
    private javax.swing.JTextField nota_komiss_3;
    private javax.swing.JLabel nota_komiss_3_text;
    private javax.swing.JTextField nota_komiss_4;
    private javax.swing.JLabel nota_komiss_4_text;
    private javax.swing.JTextField nota_komiss_5;
    private javax.swing.JLabel nota_komiss_5_text;
    private javax.swing.JFormattedTextField notar_itog;
    private javax.swing.JFormattedTextField pereplata;
    private javax.swing.JFormattedTextField perv_vznos;
    private javax.swing.JFormattedTextField priv_proc_stavka;
    private javax.swing.JFormattedTextField priv_srok_kred;
    private javax.swing.JFormattedTextField priv_srok_kred_year;
    private javax.swing.JFormattedTextField proc_perv_vznos;
    private javax.swing.JFormattedTextField proc_stavka;
    private javax.swing.JTextField riel_komiss_1;
    private javax.swing.JLabel riel_komiss_1_text;
    private javax.swing.JTextField riel_komiss_2;
    private javax.swing.JLabel riel_komiss_2_text;
    private javax.swing.JTextField riel_komiss_3;
    private javax.swing.JLabel riel_komiss_3_text;
    private javax.swing.JFormattedTextField rieltor_itog;
    private javax.swing.JFormattedTextField srok_kred;
    private javax.swing.JFormattedTextField srok_kred_new;
    private javax.swing.JFormattedTextField srok_kred_year;
    private javax.swing.JFormattedTextField srok_kred_year_new;
    private javax.swing.JTextField stra_komiss_1;
    private javax.swing.JLabel stra_komiss_1_text;
    private javax.swing.JTextField stra_komiss_2;
    private javax.swing.JLabel stra_komiss_2_text;
    private javax.swing.JTextField stra_komiss_3;
    private javax.swing.JLabel stra_komiss_3_text;
    private javax.swing.JFormattedTextField strax_itog;
    private javax.swing.JFormattedTextField sum_dop_plat;
    private javax.swing.JFormattedTextField sum_kred;
    private javax.swing.JFormattedTextField sum_plat;
    private javax.swing.JFormattedTextField summa;
    private javax.swing.JFormattedTextField summa_ekv;
    private javax.swing.JComboBox<String> type_annuitet;
    private javax.swing.JComboBox<String> type_proc;
    private javax.swing.JComboBox<String> type_rasch;
    private javax.swing.JLabel year_0;
    private javax.swing.JLabel year_1;
    private javax.swing.JLabel year_2;
    private javax.swing.JLabel year_3;
    private javax.swing.JLabel year_4;
    private javax.swing.JLabel year_5;
    // End of variables declaration//GEN-END:variables
}
